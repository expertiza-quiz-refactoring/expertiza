<% if rscore and rscore[:assessments].length > 0 %>
    <BR/>
    <%flag_varying_rubrics=false%>

    <%if @questions.has_key?("review1".to_sym)%>
        <b> Round 1:</b>
        <%flag_varying_rubrics=true%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review1".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer", :round=>1 }%>
    <%end%>

    <%if @questions.has_key?("review2".to_sym)%>
        <b> Round 2:</b>
        <%flag_varying_rubrics=true%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review2".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer" , :round=>2 }%>
    <%end%>

    <%if @questions.has_key?("review3".to_sym)%>
        <b> Round 3:</b>
        <%flag_varying_rubrics=true%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review3".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer" , :round=>3 }%>
    <%end%>
    
    <%if flag_varying_rubrics==false%>
        <%= render :partial => 'grades/review_table', :locals => { :ctrl => 'review', :caction => 'view_review', :symbol => "review".to_sym, :prefix => prefix, :assignment => participant.assignment, :reviews => rscore[:assessments], :collabel => "Review", :rowlabel => "Reviewer" }%>
    <%end%>
    <BR/>
    <HR/>
    <% count = 0 %>
    <!--Zhewei: If this assignment supports varying rubrics by round, Expertiza will display all-round reviews. -->
    <!--And if one reviewer did not do first-round review and did second round directly, Expertiza will display only second round.-->
    <!--If another reviewer only finished first-round review and did not do second round, Expertiza will display only first round.-->
    <!--If this assignment does not support varying rubrics by round, Expertiza will display last round review.--> 
    <% for review in rscore[:assessments].reverse.uniq{|response| response.map_id}.reverse %>
        <% review_feedback = nil %>
        <% count = count + 1 %>
        <% prefix = nil if controller.action_name == "view_my_scores" %>

        <h3>Review <%= count %></h3>
        <!--<%= review.display_as_html(nil, count) %><BR/>-->
        <!--change code in order to compat to multi-round review-->
        <% if @assignment.varying_rubrics_by_round? and !review.round.nil? %>
            <% review_symbol = 'review' + review.round.to_s %>
        <% else %>
            <% review_symbol = 'review' %>
        <% end %>
        <% @questions[review_symbol.to_sym].each do |question| %>
            <% if question.instance_of? UploadFile %>
                <!-- Display FileUpload question type -->
                <% current_folder = DisplayOption.new %>
                <% current_folder.name = "" %>
                <% files = @participant.files(@participant.review_file_path(review.response_map.id).to_s + current_folder.name) %>
                <%= display_directory_tree(@participant, files, true).html_safe %>
            <% end %>
        <% end %>

        <!-- get all previous versions, and pick up each round's last verson of peer review. -->
        <% @sorted_array = Array.new %>
        <% @prev = review.map.response.select{|response| response.is_submitted} %>
        <% @prev_review_rounds = Array.new %>
        <% @prev.each{|response| @prev_review_rounds << response.round unless @prev_review_rounds.include?(response.round) and response.is_submitted} %>
        <% @prev_review_rounds.delete_at(@prev_review_rounds.length - 1) if review.round == @prev_review_rounds.last %>
        <% unless @prev_review_rounds.empty? %>
            <% @prev_review_rounds.each do |round| %>
                <% @sorted_array << @prev.select{|response| response.round == round}.sort.last %>
            <% end %>
        <% end %>
        <% @sorted_array << review %>

        <% @sorted_array.each_with_index do |response, index| %>
            <% @str = response.id.to_s %>
            <% round = 1 %>
            <% (response.round.nil? or response.round == 0)? round = 1 : round = response.round %>
            <%= response.display_as_html(prefix, round, nil) %><br/>
            <script>toggleElement('reviews_<%=@str%>','review');</script>
        <% end %>

        <% map = FeedbackResponseMap.find_by_reviewed_object_id(review.id)
            review_feedbacks = map.try :response %>
        <% if review_feedbacks && !review_feedbacks.empty? %>
            <%= link_to "View", :controller => 'response', :action => 'view', :id => review_feedbacks.first.id %> or
            <%= link_to "Edit", :controller => 'response', :action => 'edit', :id => review_feedbacks.first.id, :return => "feedback" %> feedback for Review <%= count %>
        <% else %>
            <%= link_to "Give feedback", :controller => 'response', :action => 'new_feedback', :id => review.id %> for Review <%= count %>
        <% end %>
        <hr>  
    <% end %>
<% else %>
    <i>No reviews have been completed for this user's submissions.</i>
<% end %>
